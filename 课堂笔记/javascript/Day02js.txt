1、数据类型转换
2、运算符和表达式
**********************
1、数据类型转换
	1、什么数据类型转换
		弱类型：由数据来决定变量的数据类型是什么
			var stu;//undefined
			stu=25;//number
			stu="25"//string

		不同数据类型的数据在运算的过程中，如何处理？？
		var num1=15;//number
		var num2=13;//number
		var result=num1+num2;//28 -> number
		var str1="15";//string
		var result1=num1+str1;
	2、隐式转换
		自动转换，由JS在运算过程中，自己进行转换的操作，不需人为参与
		1、函数 或 运算符
			typeof() 或 typeof
			ex:
				var num1 = 15;
				var s = typeof(num1); : 获取 num1 的数据类型
				var s1 = typeof num1; : 获取 num1 的数据类型
		2、NaN
			Not a Number
			不是一个数字
			isNaN(数据) : 判断 数据是否为 非数字
			是不是一个数字
			结果为 boolean 类型
			结果为 true ：不是一个数字
			结果为 false：是一个数字
		3、所有的数据类型 与 string 做 + 运算时，最后的结果都为 string
	3、转换函数 - 显示转换(强制转换)
		1、toString()
			将任意类型的数据转换为 string 类型

			变量.toString();
			会得到一个全新的结果，类型为 string

			var num=15;
			var str=num+"";

		2、parseInt()
			整型：Integer
			作用：获取 指定数据的 整数 部分
			语法：
				var result = parseInt(数据);
			注意：
				parseInt ， 从左向右 依次转换，碰到第一个非整数字符，则停止转换。如果第一个字符就是非整数字符的话，结果为 NaN
		3、parseFloat()
			Float ：浮点类型->小数
			作用：将 指定数据转换成 小数
			语法：
				var result = parseFloat(数据);
				ex :
					var result=parseFloat("35.25"); //35.25
					var result=parseFloat("35.2你好!");//35.2
					var result=parseFloat("你好35.2");//NaN
					var result=parseFloat("35.");//35
					var result=parseFloat(".35");//0.35
					var result=parseFloat("35.0");?
		4、Number()
			作用：将一个字符串解析为number
			语法：var result=Number(数据);
			注意：如果包含非法字符，则返回NaN
2、运算符&表达式
	1、运算符和表达式
		运算符：能够完成数据计算的一组符号
			比如：+,-,*,/,... ...
		表达式：由运算符和操作数所组成的式子叫作表达式，每个表达式都有自己的值
			15+18;
			var a=15;
			//a 变量的值为 15，整个表达式的值 也为15
	2、运算符
		1 、算术运算符
			+,-,*,/,%,++,--

			+ : 可以表示加法，也可以用于字符串连接
				+ 两边的操作数如果都是 number类型或boolean的话，那么所执行的就是加法操作
				如果两边的操作数，有一个是string类型的话，那么执行的操作就是连接

				ex:
					var num1 = 15;
					var num2 = 18;
					var str1 = "15";

					console.log(num1+num2);//33
					console.log(num1+str1);//1515
			- : 可以表示减法操作，也表示负数的声明
				var num1 = -15;
			* :
				ex:
					15*2 结果：30
			/ :
				ex:
					15/2 结果：7.5
			% : 取余操作，俗称 模
				作用：取两个数字的余数
				ex:
					5 % 2 结果：1
				使用场合：
					1、判断数字的奇偶性
						var num = 33;

						判断 num % 2 的结果 是否为 0，如果为0则为 偶数，否则则为 奇数
					2、获取 数字的最后几位
						var num = 1234;
						问题：想获取 num 的最后一位
						num % 10 结果为 ：4
						问题：想获取 num 的最后两位
						num % 100 结果为：34
			注意：如果 -*/% 的两端都是 数字 形式的字符串，那么所做的操作依然是算术操作
				ex:
					var num1 = "15";
					var num2 = "18";
					var r1 = num1+num2;//1518
					var r2 = num1-num2;//-3
			自增 & 自减
			++ : 自增，在数值的基础上，进行+1操作
				var num = 10;
				num++;
					++在操作数的后面，先使用num的值，然后再对num进行自增
				ex:
				var num=10;
				console.log(num++);//先输出num的值，然后再对num进行自增,所以该行的结果为 10
				console.log(num);//该行的结果为 11

				++num;
				先对num进行自增，然后再使用num的值
			-- : 自减，在数值的基础上，进行-1操作
	3、关系运算符
		1、作用
			比较数据之间的大小关系
		2、运算符
			> : 大于
			< : 小于
			>= : 大于等于
			<= : 小于等于
			== : 判断等于
				注意：不比较类型，只比较数值
			!= : 不等于
			=== : 全等
				注意：除数值之外，连同类型也会一起比较
			!== : 不全等
			由关系运算符所组成的表达式称之为"关系表达式"
			关系表达式的运算结果为 boolean类型(true 或 false)
		3、判断一个 数据 是否为 数字
			var input=prompt("请输入一个数据：");
			判断 input 是否为 数字??

			isNaN(数据)
			isNaN()会抛开数据类型来判断数据是否为数字
			如果 数据 是数字类型，则返回 false
			如果 数据 不是数字类型，则返回 true
	4、逻辑运算符
		1、作用
			关联条件
			ex:
				判断 考试分数 是否在 60 ~ 80 之间
				var score = 52;
				条件1：score >= 60
				条件2：score <= 80
		2、逻辑运算符
			逻辑非 : !
			逻辑与 : &&
			逻辑或 : ||

			2.1 逻辑与(&&)
				关联两个条件，两个条件都为真的时候，那么整个表达式的结果才为真
				语法：
				条件1 && 条件2

				问题：判断 考试分数 是否在 60 ~ 80 之间
				var score = 52;
				条件1：score>=60
				条件2：score<=80
				var result = score>=60 && score<=80;
			2.2 逻辑或(||)
				关联两个条件，两个条件中，只要有一个为真，那么整个表达式的结果就为真
				问题：笔试题和面试题,笔试题或面试题的分时，有一个超过60就认为是合格
				var bishi = 52;
				var mianshi = 82;

				条件1：bishi >= 60
				条件2：mianshi >= 60

				var result = bishi >= 60 || mianshi >= 60;
			2.3 逻辑非(!)
				对条件取反
				注意：逻辑非，只有一个操作数
				语法：!条件

				非真即假
				非假即真
		3、短路逻辑
			1、短路&&	
				如果第一个条件的结果已经为 false 的话，那么就不会再判断第二个条件,那么整个表达式的值，就是 false
				如果第一个条件的结果是true的话，则继续判断(执行)第二个条件(表达式)，并且以第二个表达式的值，作为整个 表达式的值。

			2、短路 ||
				如果第一个条件的结果已经为 true的话，那么就不会再判断第二个条件，那么整个表达式的值，就是true
				如果第一个条件的结果是false的话，则继续判断(执行)第二个条件(表达式),并且以第二个表达式的值，作为整个表达式的值。

