回顾: 
1. 数组:
 创建: 3种
  1. 创建空数组: 2种:
    1. 数组直接量: var arr=[];
    2. 用new: var arr=new Array();
  2. 创建数组同时初始化数组内容: 2种
    1. 数组直接量: var arr=[元素1,元素2,...]
    2. 用new: var arr=new Array(元素1,元素2,...);
  3. 创建n个空元素的数组:
    用new: var arr=new Array(n);
 
 访问数组元素: arr[i]――用法和普通变量完全一样

 数组.length属性: 始终等于最大下标+1
   固定套路: 
     1. 获得数组最后一个元素: arr[arr.length-1]
     2. 获得倒数第n个元素: arr[arr.length-n]
     3. 在数组末尾追加新元素: arr[arr.length]=新值
     4. 缩容: 减少length的数值
     5. 遍历:
      for(var i=0;i<arr.length;i++){
	arr[i]//当前正在遍历的元素
      }

  特殊: 3不限制:
   1. 不限制元素个数: 随时可以添加新元素
   2. 不限制下标越界:
      获取元素时下标越界: 不报错! 返回undefined
      修改元素时下标越界: 不报错! 数组在指定位置自动添加新元素
   3. 不限制元素的数据类型: 

  关联数组: vs 索引数组
    创建: 
     1. 先创建空数组: var lxr=[]
     2. 向数组中添加新元素，自定义下标名: 
	lxr["下标名"]=值 
  访问元素: 同访问索引数组元素: hash["下标名"]
  关联数组的length属性失效:
  遍历: 
    for(var key in hash){
      key//仅是下标名
      hash[key]//获得key位置的元素值
    }
  查询速度: 关联数组比索引数组快的多
      何时: 希望快速查找数组中是否包含指定元素时
  
API:
  String(arr)
   补: String vs toString
     String 万能
     function String(obj){
        if(obj===undefined){
           return "undefined";
        }else if(obj==null){
	   return "null";
	}else{
           return obj.toString();
        }
     }
     toString 只能转换除null和undefined外的任何数据
  arr.join("连接符")
    固定套路: 
     1. 无缝拼接: arr.join("")
     2. 将单词拼接为句子: arr.join(" ")
     3. 判断数组是否为空: arr.join("")=="";
     4. 将数组动态生成页面元素: 
        "<开始标签>"+
        arr.join("</结束标签><开始标签>")
        +"</结束标签>"

正课:
1. ***数组:

API:
1. 拼接和选取: 不直接修改原数组，而返回新数组！
  拼接:
  var newArr=arr1.concat(值1,值2,arr2,值3,...)
    将值1,值2和arr2中每个元素,以及值3都拼接到arr1的元素之后，返回新数组
    其中: arr2的元素会被先*打散*，再拼接
  选取: 
  var subArr=arr.slice(starti,endi+1)
     选取arr中starti位置开始，到endi结束的所有元素组成新数组返回――原数组保持不变
   强调: 凡是两个参数都是下标的函数，都有一个特性:
         含头不含尾
   简写: 
     1. 一直选取到结尾: 可省略第二个参数
     2. 如果选取的元素离结尾近: 可用倒数下标:
        arr.slice(arr.length-n,arr.length-m+1)
        可简写为:arr.slice(-n,-m+1);
     3. 复制数组: 
        arr.slice(0,arr.length);
        可简写为:arr.slice();

2. 修改数组:splice 直接修改原数组
  删除: arr.splice(starti,n);
       删除arr中starti位置开始的n个元素
       不考虑含头不含尾
    其实: var deletes=arr.splice(starti,n);
       返回值deletes保存了被删除的元素组成的临时数组
  插入: arr.splice(starti,0,值1,值2,...)
    在arr中starti位置，插入新值1,值2,...
      原starti位置的值及其之后的值被向后顺移
    强调: 不支持打散数组类型参数
  替换: 其实就是删除旧的，插入新的
    arr.splice(starti,n,值1,值2,...)
	先删除arr中starti位置的n个值，再在starti位置插入新值
    强调: 删除的元素个数和插入的新元素个数不必一致。
    
3.颠倒数组: arr.reverse();
  强调: 仅负责原样颠倒数组，不负责排序

4.****排序:将元素按从小到大的顺序重新排列
  排序算法:(手写) 冒泡 快速 插入排序
    冒泡:









