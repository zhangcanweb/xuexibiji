张东
zhangdong@tedu.cn
学习方法:
1. 拿到上届笔记,前一天晚上预习，第二天拿着笔记上课
   思维导图: 快速查找API
2. 案例:
   注释->每行注释一分钟->公布->不等
   课下: 3遍:
    1. 注释和代码 抄
    2. 留注释，写代码
    3. 自己可以把注释写回来
3. 学的好坏:3档:
   1. 老师边写注释，学生边写代码
   2. 老师写完注释，在规定时间内，可以码出代码
   3. 看着老师的注释，写不出代码

书: 犀牛书
微信: 前端大全
js1k: 毕业时的个人案例-游戏，算法

正课: 
1.***数组:

什么是: 内存中连续存储多个数据的数据结构，再起一个统一的名字
为什么: 普通的变量只能存储一个数据
  程序=数据结构+算法:
    算法: 解决问题的步骤
    数据结构: 数据在内存中的存储结构
  好的数据结构可以极大的提高程序的执行效率
何时: 只要存储多个连续的数据

如何: 
  创建: 3种:
    1. 创建空数组: 2种:
       1. 数组直接量: var arr=[];
       2. 用new: var arr=new Array();
                         新建 数组
       何时: 在创建数组时，还不知道数组中的元素内容时
    2. 创建数组同时，初始化输出中的元素:
       1. 数组直接量: var arr=[元素1,元素2,...];
       2. 用new: var arr=new Array(元素1,元素2,...);
       何时: 在创建数组时，已经知道数组的元素内容
    3. 创建n个空元素的数组:
       用new: var arr=new Array(n);

  数组是引用类型的对象: vs 原始类型的值
    原始类型的值: 数据直接保存在变量本地的数据类型
      number, string, boolean, null, undefined
    引用类型的对象: 数据无法直接保存在变量本地的数据类型
        如何存储: 在变量之外开辟独立的存储空间
                  变量中仅保存外部存储空间的地址
  回顾: 按值传递: 
    两个变量间赋值时，或将变量作为参数传入函数时，其实只是将原变量中的值复制一个副本给对方！
    结果: 对原始类型的值: 修改新变量，不影响原变量
              为什么: 复制的是原始的值
          对引用类型的对象: 通过新变量修改对象，等效于直接修改原对象。
              为什么: 仅复制地址值，原对象不增加

  垃圾回收: 引擎会自动释放不再使用的对象的空间
  垃圾回收器: 自动记录对象的引用次数，并释放不再被任何变量引用的对象的 小程序
    伴随js主程序并行执行。 
   原理: 创建对象时，每个对象都有一个属性:引用计数器，用来记录引用对象的变量个数
       *如果变量不再使用对象时，要将变量赋值为null*
        对象的引用计数器-1
        垃圾回收器会自动寻找引用计数器为0的对象，释放

  访问数组中的元素:
    元素: 数组中每个数据都是一个元素
    如何访问: 下标: 数组中唯一标识每个元素存储位置的序号
                特点: 从0开始,连续不重复
      何时: 只要访问数组元素，只能用下标
      如何: 数组名[i]――用法和单个变量完全一样！
  
  数组的length属性: 记录了数组中理论上的元素个数
                   length属性的值永远是最大下标+1
    固定套路: 
     1.获得数组最后一个元素: arr[arr.length-1]
     2.获得倒数第n个元素的位置: arr[arr.length-n]
     3.在数组末尾追加一个新元素: arr[arr.length]=新值
     4.数组缩容: 减小arr.length的数值，会删除结尾的多余元素。
     5.遍历数组: 依次访问数组中每个元素，对每个元素执行相同的操作
      for(var i=0;i<arr.length;i++){
	arr[i]//当前正在遍历的元素
      }

  特殊: 三个不限制:
   1. 不限制数组的元素个数:长度可变
   2. 不限制下标越界: 
     获取元素值: 不报错！返回undefined
     修改元素指: 不报错! 自动在指定位置创建新元素，并且自动修改length属性为最大下标+1
       如果下标不连续的数组――稀疏数组
   3. 不限制元素的数据类型: 
         












