1、复杂选择器
2、内容生成
3、多列
4、CSS Hack(浏览器兼容性)
******************************
1、复杂选择器
	1、选择器作用
		匹配页面上的元素
	2、复杂选择器分类
		1、兄弟选择器
			1、什么是兄弟选择器
				通过元素的位置关系来匹配元素的
				位置关系：具备相同父元素，同级关系的元素
				特点：只能向后找，不能向前找
			2、
				2.1 ：相邻兄弟选择器
					相邻：后一个
					<div id="d1"></div>
					<div id="d2"></div>
					<div id="d3"></div>

					语法：选择器1+选择器2
				2.2 ：通用兄弟选择器
					用于匹配 某元素后面的所有兄弟元素
					语法：选择器1~选择器2
					语义：匹配 选择器1 后面 所有满足选择器2的 兄弟元素
		2、属性选择器
			1、什么是属性选择器
				<div id="d1" class="c1"></div>
				允许使用 元素所附带的属性及其值，来匹配页面的元素
				ex:
					1、获取页面上所有 class 为 c1 的元素
					2、获取页面上所有 附带 id属性的 元素
			2、语法
				1、[attribute]
						attribute:属性
						语义：匹配页面上所有附带 attribute 属性的元素
						ex:
							1、[id]
								匹配页面上所有附带 id 属性的元素
							2、[class]
								匹配页面上所有附带 class 属性的元素
				2、elem[attribute]
						elem:元素
						attribute:属性
						语义：匹配页面上所有附带 attribute 属性的 elem 元素
						ex:
							1、div[id]
								匹配页面上所有附带 id 属性的 div 元素
							2、div[id][class]
								匹配页面上所有 即具备id属性，同时又具备class 属性的 div元素
				3、elem[attribute=value]
						语义：匹配 页面中 所有 attribute 属性的值为 value 的elem元素
					ex
						1、div[id=d1]
							== #d1
						2、p[class='redBack']
							== p.redBack
						3、input[type="text"]
							匹配页面中所有的单行文本框
						4、匹配页面中所有的禁用元素
							[disabled]
						5、匹配页面中所有的复选框
							input[type="checkbox"]
							或
							[type="checkbox"]
						
				4、elem[class~=value]
					class的多类引用方式
					<div class="redBack important weight"></div>

					语义：class 属性值 为值列表，并且value是这个列表中的一个独立单词
					ex:
						1、div[class~=important]
							匹配页面上所有的div ，并且class 值列表中 包含 important 这个独立单词的 元素
				5、elem[attribute^=value]
					^= : 以value作为开始
					语义：匹配页面中 attribute属性值是以value作为开始的elem元素
					1、div[class^=back]
						匹配页面中 class属性值是以back作为开始的div元素

				6、elem[attribute*=value]		
					语义：匹配页面中 attribute属性值中包含value字符的elem元素
					1、div[class*="or"]
						匹配页面中 class舒心值中包含or字符的div元素
						<div class="important"></div>
						<div class="visitor"></div>
						<div class="zero"></div>无法匹配

					2、div[class*="o"]
				7、elem[attribute$=value]
					语义：匹配页面中 attribute属性值中以value字符作为结尾的elem元素


				记住：
					^= , *= , $=
		3、伪类选择器
			1、目标伪类
				1 、what
					突出显示活动HTML锚点
				2、语法
					:target
			2、元素状态伪类
				元素状态：启用，禁用，被选中的
				多数用于 表达元素中，被选中的状态 用户 单选按钮和复选框中
				1、:enabled
					匹配每个已启用元素
				2、:disabled
					匹配每个被禁用元素
				3、:checked
					匹配每个被选中的元素(radio，checkbox)
			3、结构伪类
				1、:first-child
					匹配 属于其父元素中的首个子元素
				2、:last-child
					匹配 属于其父元素中的最后一个子元素
				3、:nth-child(n)
					匹配 属于其父元素中的第n个子元素
					:nth-child(5)
				4、:empty
					匹配没有子元素的每个元素
				5、:only-child
					匹配属于其父元素中的唯一子元素
			4、否定伪类
				:not(选择器)
				将 满足 指定选择器的元素 排除出去
		4、伪元素选择器
			伪类：匹配页面的元素
			伪元素：匹配页面元素中的内容
			1、:first-letter 或 ::first-letter
				匹配 某元素的 首字符
			2、:first-line 或 ::first-line
				匹配 某元素的 首行
			3、::selection
				匹配 被用户选取的部分

				: :CSS3之前的版本中使用的
				:: :CSS3中，伪元素选择器的表现形式

				推荐使用 :first-letter 替代 ::first-letter
2、内容生成
		1、什么是内容生成
			通过 css 的方式灵活的向元素内容区域之前或之后增加一些显示的内容
		2、伪元素选择器
			1、:before 
				作用：匹配某元素的内容区域之前
			2、:after
				作用：匹配某元素的内容区域之后

			<div>这是一个div</div>
		3、属性
			content
			作用：配合:before 或 :after，插入生成的内容
			取值：
				1、url()
					插入生成的图像
				2、字符串 ：纯文本
				3、计数器
		4、计数器
			1、属性-counter-reset
				1、作用
					用于声明或复位一个计数器
					如果 计数器 在页面中不存在，则声明
					如果 计数器 在页面中已存在，则复位
				2、语法
					counter-reset:计数器名称 初始值;
					初始值：
						可以省略，默认为0
						可以设置值为正或负

					声明多个计数器:
					counter-reset:计1 值1 计2 值2;
				3、注意
					计数器的声明 不能放在 使用计时器的元素中
				
			2、属性-counter-increment
				1、作用
					设置某个选择器在使用计数器时的计数器增量，默认为1
				2、语法
					counter-increment:计数器名称 增量值;
					counter-increment:计1 值1 计2 值2;
				3、注意
					哪个元素要使用计数器，在哪个元素中设置增量
			3、函数 - counter()
				1、作用
					配合着 :before 或 :after 插入生成的数字
				2、语法
					xxx:before{
						content:counter(计数器名称);
					}
			
				练习：
					完成以下效果：
					1、HTML
						1.1 基本元素
						1.2 块级元素
						1.3 行内元素
					2、CSS
						2.1 选择器
						2.2 边框属性
						2.3 尺寸属性
3、多列
		1 、分隔列
			作用：将元素拆分成几列
			属性：column-count
		2、列间隔
			作用：规定每两列之间的间隔距离
			属性：column-gap
		3、列规则
			作用：规定每两列之间的宽度，样式，颜色
			属性：column-rule
			取值：width style color
		4、浏览器兼容性
			只有 IE10+以及Opera支持多列
			通过浏览器 前缀 解决兼容性：

			Firefox :-moz-
			Safari&Chrome : -webkit-

			-webkit-column-count:3;
			-webkit-column-gap:20px;
			-webkit-column-rule:1px solid #ddd;
4、CSS Hack
	1、作用
		专门解决 IE 低版本 兼容性问题
	
	2、标准模式和混杂模式
		IE6之前，不同浏览器之间没有兼容性可言
		Netscape --> Navigator
		IE6之后，各个浏览器厂家开始寻求标准统一。IE浏览器允许向前兼容
		IE浏览器运行模式：
		1、混杂模式
			无标准可言
		2、标准模式
			完全遵循标准
		3、准标准模式
		
		不同模式下，浏览器主要对CSS(框模型)和JS解析效果会不同

		触发各种模式：
		1、触发混杂模式
			不声明 DOCTYPE
			IE将采用IE5.5内核来渲染页面
		2、触发准标准模式
	3、什么是CSSHack
		针对不同的浏览器编写不同的CSS
		实现浏览器的兼容性

		CSSHack原理：
		使用 优先级 来解决兼容性问题
	4、CSSHack的实现方式
		1、CSS类内部Hack
			给css属性或值加 前后缀的方式解决兼容性
		2、选择器Hack
			给选择器加前缀 解决兼容性
		3、HTML头部引用Hack
			条件注释
			在注释中增加条件判断，判断条件是否满足指定浏览器，从而决定 当前注释是否有效
			语法：
			<!--[if 条件 IE 版本]>
				条件注释内容
			<![endif]-->
			条件：
				1、省略条件不写
					判断是否为IE浏览器或是否为IE指定版本浏览器
					<!--[if IE]>
						该段内容只能在IE中显示
					<![endif]-->

					<!--[if IE 6]>
						该段内容只能在IE6中显示
					<![endif]-->
				2、gt
					大于
					在 大于指定版本的浏览器中 正常显示
				3、gte
					在 大于等于 指定版本的浏览器中 正常显示
				4、lt
					小于
					在 小于指定版本的浏览器中 正常显示
				5、lte
					小于等于
				6、!
					非
					选择条件版本意外所有版本
					<!--[if !IE 6]>
					<![endif]-->
					
					<!--[if !IE]>
						该段代码只能在非IE浏览器中显示
					<![endif]-->


			














					

	